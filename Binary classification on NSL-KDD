{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOW6LUw7rLMmGGP3JPiivrA"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"hkOC6mQEous5","executionInfo":{"status":"ok","timestamp":1697226318677,"user_tz":-60,"elapsed":3,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"outputs":[],"source":["from google.colab import drive\n"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16708,"status":"ok","timestamp":1697226335382,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"},"user_tz":-60},"id":"TuQkdSc1tkO5","outputId":"eda27bb3-0ef1-4fa2-8149-d0d06db8371f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"bxgeMajstvCa","executionInfo":{"status":"ok","timestamp":1697226335383,"user_tz":-60,"elapsed":8,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"outputs":[],"source":["import pandas as pd\n"]},{"cell_type":"code","source":["traindata = pd.read_csv('/content/drive/MyDrive/KDDTrain+.txt')"],"metadata":{"id":"Jasuxf-rdzv9","executionInfo":{"status":"ok","timestamp":1697226336501,"user_tz":-60,"elapsed":1124,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"ARdbHdpojA_H","executionInfo":{"status":"ok","timestamp":1697226336501,"user_tz":-60,"elapsed":50,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["traindata.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":235},"id":"C2hJTq8sjLtZ","executionInfo":{"status":"ok","timestamp":1697226336501,"user_tz":-60,"elapsed":49,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}},"outputId":"f66bc904-b003-4c79-c559-a3e22cb16e16"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   0  tcp ftp_data   SF  491   0.1  0.2  0.3  0.4  0.5  ...  0.17  0.03  \\\n","0  0  udp    other   SF  146     0    0    0    0    0  ...  0.00  0.60   \n","1  0  tcp  private   S0    0     0    0    0    0    0  ...  0.10  0.05   \n","2  0  tcp     http   SF  232  8153    0    0    0    0  ...  1.00  0.00   \n","3  0  tcp     http   SF  199   420    0    0    0    0  ...  1.00  0.00   \n","4  0  tcp  private  REJ    0     0    0    0    0    0  ...  0.07  0.07   \n","\n","   0.17.1  0.00.6  0.00.7  0.00.8  0.05  0.00.9   normal  20  \n","0    0.88    0.00    0.00    0.00   0.0    0.00   normal  15  \n","1    0.00    0.00    1.00    1.00   0.0    0.00  neptune  19  \n","2    0.03    0.04    0.03    0.01   0.0    0.01   normal  21  \n","3    0.00    0.00    0.00    0.00   0.0    0.00   normal  21  \n","4    0.00    0.00    0.00    0.00   1.0    1.00  neptune  21  \n","\n","[5 rows x 43 columns]"],"text/html":["\n","  <div id=\"df-39c12fbc-6e79-4fc0-a5a6-f9ec3c696704\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>tcp</th>\n","      <th>ftp_data</th>\n","      <th>SF</th>\n","      <th>491</th>\n","      <th>0.1</th>\n","      <th>0.2</th>\n","      <th>0.3</th>\n","      <th>0.4</th>\n","      <th>0.5</th>\n","      <th>...</th>\n","      <th>0.17</th>\n","      <th>0.03</th>\n","      <th>0.17.1</th>\n","      <th>0.00.6</th>\n","      <th>0.00.7</th>\n","      <th>0.00.8</th>\n","      <th>0.05</th>\n","      <th>0.00.9</th>\n","      <th>normal</th>\n","      <th>20</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>udp</td>\n","      <td>other</td>\n","      <td>SF</td>\n","      <td>146</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0.00</td>\n","      <td>0.60</td>\n","      <td>0.88</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>normal</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>tcp</td>\n","      <td>private</td>\n","      <td>S0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0.10</td>\n","      <td>0.05</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>1.00</td>\n","      <td>1.00</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>neptune</td>\n","      <td>19</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>tcp</td>\n","      <td>http</td>\n","      <td>SF</td>\n","      <td>232</td>\n","      <td>8153</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>1.00</td>\n","      <td>0.00</td>\n","      <td>0.03</td>\n","      <td>0.04</td>\n","      <td>0.03</td>\n","      <td>0.01</td>\n","      <td>0.0</td>\n","      <td>0.01</td>\n","      <td>normal</td>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>tcp</td>\n","      <td>http</td>\n","      <td>SF</td>\n","      <td>199</td>\n","      <td>420</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>1.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>normal</td>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>tcp</td>\n","      <td>private</td>\n","      <td>REJ</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0.07</td>\n","      <td>0.07</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>1.0</td>\n","      <td>1.00</td>\n","      <td>neptune</td>\n","      <td>21</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 43 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-39c12fbc-6e79-4fc0-a5a6-f9ec3c696704')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-39c12fbc-6e79-4fc0-a5a6-f9ec3c696704 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-39c12fbc-6e79-4fc0-a5a6-f9ec3c696704');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-18274e5e-15d7-4072-b387-4960b7859bd8\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-18274e5e-15d7-4072-b387-4960b7859bd8')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-18274e5e-15d7-4072-b387-4960b7859bd8 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["columns = (['duration'\n",",'protocol_type'\n",",'service'\n",",'flag'\n",",'src_bytes'\n",",'dst_bytes'\n",",'land'\n",",'wrong_fragment'\n",",'urgent'\n",",'hot'\n",",'num_failed_logins'\n",",'logged_in'\n",",'num_compromised'\n",",'root_shell'\n",",'su_attempted'\n",",'num_root'\n",",'num_file_creations'\n",",'num_shells'\n",",'num_access_files'\n",",'num_outbound_cmds'\n",",'is_host_login'\n",",'is_guest_login'\n",",'count'\n",",'srv_count'\n",",'serror_rate'\n",",'srv_serror_rate'\n",",'rerror_rate'\n",",'srv_rerror_rate'\n",",'same_srv_rate'\n",",'diff_srv_rate'\n",",'srv_diff_host_rate'\n",",'dst_host_count'\n",",'dst_host_srv_count'\n",",'dst_host_same_srv_rate'\n",",'dst_host_diff_srv_rate'\n",",'dst_host_same_src_port_rate'\n",",'dst_host_srv_diff_host_rate'\n",",'dst_host_serror_rate'\n",",'dst_host_srv_serror_rate'\n",",'dst_host_rerror_rate'\n",",'dst_host_srv_rerror_rate'\n",",'attack'\n",",'level'])"],"metadata":{"id":"Gvrem_A3kMqG","executionInfo":{"status":"ok","timestamp":1697226336501,"user_tz":-60,"elapsed":37,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["traindata.columns = columns\n"],"metadata":{"id":"anPPrgrWkPVf","executionInfo":{"status":"ok","timestamp":1697226336501,"user_tz":-60,"elapsed":36,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["traindata.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":255},"id":"j6y1lUTYnbEH","executionInfo":{"status":"ok","timestamp":1697226336502,"user_tz":-60,"elapsed":37,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}},"outputId":"176f09bd-9688-4f94-d6e0-f1551205766a"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   duration protocol_type  service flag  src_bytes  dst_bytes  land  \\\n","0         0           udp    other   SF        146          0     0   \n","1         0           tcp  private   S0          0          0     0   \n","2         0           tcp     http   SF        232       8153     0   \n","3         0           tcp     http   SF        199        420     0   \n","4         0           tcp  private  REJ          0          0     0   \n","\n","   wrong_fragment  urgent  hot  ...  dst_host_same_srv_rate  \\\n","0               0       0    0  ...                    0.00   \n","1               0       0    0  ...                    0.10   \n","2               0       0    0  ...                    1.00   \n","3               0       0    0  ...                    1.00   \n","4               0       0    0  ...                    0.07   \n","\n","   dst_host_diff_srv_rate  dst_host_same_src_port_rate  \\\n","0                    0.60                         0.88   \n","1                    0.05                         0.00   \n","2                    0.00                         0.03   \n","3                    0.00                         0.00   \n","4                    0.07                         0.00   \n","\n","   dst_host_srv_diff_host_rate  dst_host_serror_rate  \\\n","0                         0.00                  0.00   \n","1                         0.00                  1.00   \n","2                         0.04                  0.03   \n","3                         0.00                  0.00   \n","4                         0.00                  0.00   \n","\n","   dst_host_srv_serror_rate  dst_host_rerror_rate  dst_host_srv_rerror_rate  \\\n","0                      0.00                   0.0                      0.00   \n","1                      1.00                   0.0                      0.00   \n","2                      0.01                   0.0                      0.01   \n","3                      0.00                   0.0                      0.00   \n","4                      0.00                   1.0                      1.00   \n","\n","    attack  level  \n","0   normal     15  \n","1  neptune     19  \n","2   normal     21  \n","3   normal     21  \n","4  neptune     21  \n","\n","[5 rows x 43 columns]"],"text/html":["\n","  <div id=\"df-129c8162-0a3d-4a39-bbdc-a8bec687ad50\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>duration</th>\n","      <th>protocol_type</th>\n","      <th>service</th>\n","      <th>flag</th>\n","      <th>src_bytes</th>\n","      <th>dst_bytes</th>\n","      <th>land</th>\n","      <th>wrong_fragment</th>\n","      <th>urgent</th>\n","      <th>hot</th>\n","      <th>...</th>\n","      <th>dst_host_same_srv_rate</th>\n","      <th>dst_host_diff_srv_rate</th>\n","      <th>dst_host_same_src_port_rate</th>\n","      <th>dst_host_srv_diff_host_rate</th>\n","      <th>dst_host_serror_rate</th>\n","      <th>dst_host_srv_serror_rate</th>\n","      <th>dst_host_rerror_rate</th>\n","      <th>dst_host_srv_rerror_rate</th>\n","      <th>attack</th>\n","      <th>level</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>udp</td>\n","      <td>other</td>\n","      <td>SF</td>\n","      <td>146</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0.00</td>\n","      <td>0.60</td>\n","      <td>0.88</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>normal</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>tcp</td>\n","      <td>private</td>\n","      <td>S0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0.10</td>\n","      <td>0.05</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>1.00</td>\n","      <td>1.00</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>neptune</td>\n","      <td>19</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>tcp</td>\n","      <td>http</td>\n","      <td>SF</td>\n","      <td>232</td>\n","      <td>8153</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>1.00</td>\n","      <td>0.00</td>\n","      <td>0.03</td>\n","      <td>0.04</td>\n","      <td>0.03</td>\n","      <td>0.01</td>\n","      <td>0.0</td>\n","      <td>0.01</td>\n","      <td>normal</td>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>tcp</td>\n","      <td>http</td>\n","      <td>SF</td>\n","      <td>199</td>\n","      <td>420</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>1.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>normal</td>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>tcp</td>\n","      <td>private</td>\n","      <td>REJ</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0.07</td>\n","      <td>0.07</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>1.0</td>\n","      <td>1.00</td>\n","      <td>neptune</td>\n","      <td>21</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 43 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-129c8162-0a3d-4a39-bbdc-a8bec687ad50')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-129c8162-0a3d-4a39-bbdc-a8bec687ad50 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-129c8162-0a3d-4a39-bbdc-a8bec687ad50');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8e08c9f0-92c3-4cac-af87-d5bc57295e78\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8e08c9f0-92c3-4cac-af87-d5bc57295e78')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8e08c9f0-92c3-4cac-af87-d5bc57295e78 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["from sklearn.preprocessing import LabelEncoder"],"metadata":{"id":"rgNi_dzxM5CQ","executionInfo":{"status":"ok","timestamp":1697226337085,"user_tz":-60,"elapsed":620,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["from sklearn.preprocessing import LabelEncoder, StandardScaler\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score, confusion_matrix, roc_curve, auc\n","import matplotlib.pyplot as plt\n","import xgboost as xgb\n","from keras.models import Sequential\n","from keras.layers import Dense, LSTM, GRU, SimpleRNN\n","from keras.utils import to_categorical\n","import numpy as np"],"metadata":{"id":"OTH1da9vgPSn","executionInfo":{"status":"ok","timestamp":1697226339813,"user_tz":-60,"elapsed":2730,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["\n","traindata_attack = traindata.attack.map(lambda a: 0 if a == 'normal' else 1)"],"metadata":{"id":"lGlTiGih1Dti","executionInfo":{"status":"ok","timestamp":1697226339815,"user_tz":-60,"elapsed":22,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["\n","traindata['attack'] = traindata_attack"],"metadata":{"id":"8d6rWntu1UG-","executionInfo":{"status":"ok","timestamp":1697226339815,"user_tz":-60,"elapsed":20,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["categorical_cols = ['protocol_type', 'service', 'flag', 'land', 'logged_in', 'is_host_login', 'is_guest_login']\n","for col in categorical_cols:\n","    le = LabelEncoder()\n","    traindata[col] = le.fit_transform(traindata[col])"],"metadata":{"id":"4Yccb26lYFY4","executionInfo":{"status":"ok","timestamp":1697226339816,"user_tz":-60,"elapsed":21,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["traindata.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":255},"id":"hZJcA75pz7Wo","executionInfo":{"status":"ok","timestamp":1697226339816,"user_tz":-60,"elapsed":20,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}},"outputId":"6842d032-8f33-4681-cd82-6d5cec35efc1"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   duration  protocol_type  service  flag  src_bytes  dst_bytes  land  \\\n","0         0              2       44     9        146          0     0   \n","1         0              1       49     5          0          0     0   \n","2         0              1       24     9        232       8153     0   \n","3         0              1       24     9        199        420     0   \n","4         0              1       49     1          0          0     0   \n","\n","   wrong_fragment  urgent  hot  ...  dst_host_same_srv_rate  \\\n","0               0       0    0  ...                    0.00   \n","1               0       0    0  ...                    0.10   \n","2               0       0    0  ...                    1.00   \n","3               0       0    0  ...                    1.00   \n","4               0       0    0  ...                    0.07   \n","\n","   dst_host_diff_srv_rate  dst_host_same_src_port_rate  \\\n","0                    0.60                         0.88   \n","1                    0.05                         0.00   \n","2                    0.00                         0.03   \n","3                    0.00                         0.00   \n","4                    0.07                         0.00   \n","\n","   dst_host_srv_diff_host_rate  dst_host_serror_rate  \\\n","0                         0.00                  0.00   \n","1                         0.00                  1.00   \n","2                         0.04                  0.03   \n","3                         0.00                  0.00   \n","4                         0.00                  0.00   \n","\n","   dst_host_srv_serror_rate  dst_host_rerror_rate  dst_host_srv_rerror_rate  \\\n","0                      0.00                   0.0                      0.00   \n","1                      1.00                   0.0                      0.00   \n","2                      0.01                   0.0                      0.01   \n","3                      0.00                   0.0                      0.00   \n","4                      0.00                   1.0                      1.00   \n","\n","   attack  level  \n","0       0     15  \n","1       1     19  \n","2       0     21  \n","3       0     21  \n","4       1     21  \n","\n","[5 rows x 43 columns]"],"text/html":["\n","  <div id=\"df-50069024-33b6-4910-b153-b63af2e326e5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>duration</th>\n","      <th>protocol_type</th>\n","      <th>service</th>\n","      <th>flag</th>\n","      <th>src_bytes</th>\n","      <th>dst_bytes</th>\n","      <th>land</th>\n","      <th>wrong_fragment</th>\n","      <th>urgent</th>\n","      <th>hot</th>\n","      <th>...</th>\n","      <th>dst_host_same_srv_rate</th>\n","      <th>dst_host_diff_srv_rate</th>\n","      <th>dst_host_same_src_port_rate</th>\n","      <th>dst_host_srv_diff_host_rate</th>\n","      <th>dst_host_serror_rate</th>\n","      <th>dst_host_srv_serror_rate</th>\n","      <th>dst_host_rerror_rate</th>\n","      <th>dst_host_srv_rerror_rate</th>\n","      <th>attack</th>\n","      <th>level</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>44</td>\n","      <td>9</td>\n","      <td>146</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0.00</td>\n","      <td>0.60</td>\n","      <td>0.88</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>0</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>49</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0.10</td>\n","      <td>0.05</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>1.00</td>\n","      <td>1.00</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>1</td>\n","      <td>19</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>24</td>\n","      <td>9</td>\n","      <td>232</td>\n","      <td>8153</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>1.00</td>\n","      <td>0.00</td>\n","      <td>0.03</td>\n","      <td>0.04</td>\n","      <td>0.03</td>\n","      <td>0.01</td>\n","      <td>0.0</td>\n","      <td>0.01</td>\n","      <td>0</td>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>24</td>\n","      <td>9</td>\n","      <td>199</td>\n","      <td>420</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>1.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>0</td>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>49</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0.07</td>\n","      <td>0.07</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>1.0</td>\n","      <td>1.00</td>\n","      <td>1</td>\n","      <td>21</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 43 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-50069024-33b6-4910-b153-b63af2e326e5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-50069024-33b6-4910-b153-b63af2e326e5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-50069024-33b6-4910-b153-b63af2e326e5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1258500b-457e-42bb-a4c5-84a22fceada8\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1258500b-457e-42bb-a4c5-84a22fceada8')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1258500b-457e-42bb-a4c5-84a22fceada8 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["X = traindata.drop(columns=['attack'])\n","y = traindata['attack']"],"metadata":{"id":"uESVM3AfeU4p","executionInfo":{"status":"ok","timestamp":1697226339816,"user_tz":-60,"elapsed":12,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["xgb_model = xgb.XGBClassifier(objective='multi:softmax', num_class=len(y.unique()))\n","xgb_model.fit(X, y)\n","feature_importances = xgb_model.feature_importances_"],"metadata":{"id":"MJZxCm6mezMR","executionInfo":{"status":"ok","timestamp":1697226342913,"user_tz":-60,"elapsed":3108,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["sorted_idx = np.argsort(feature_importances)[-20:]\n","X_selected = X.iloc[:, sorted_idx]"],"metadata":{"id":"ML2qGv-we5HZ","executionInfo":{"status":"ok","timestamp":1697226342914,"user_tz":-60,"elapsed":10,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["print(\"sorted_idx:\")\n","print(sorted_idx)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ysuUnL_meXPI","executionInfo":{"status":"ok","timestamp":1697226342914,"user_tz":-60,"elapsed":9,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}},"outputId":"d96875a5-fd43-4f1f-a7d8-d0f9fd382a91"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["sorted_idx:\n","[36 15 12  3 24  7 37  9 38 33 35 29  5 11 32 40 41 22  1  4]\n"]}]},{"cell_type":"code","source":["scaler = StandardScaler()\n","X_normalized = scaler.fit_transform(X_selected)"],"metadata":{"id":"6UWNfb0Ifx95","executionInfo":{"status":"ok","timestamp":1697226342914,"user_tz":-60,"elapsed":5,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(X_normalized, y, test_size=0.3, random_state=42)"],"metadata":{"id":"a8PlxlR2f1LY","executionInfo":{"status":"ok","timestamp":1697226342914,"user_tz":-60,"elapsed":4,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["y_train_onehot = to_categorical(y_train)\n","y_test_onehot = to_categorical(y_test)"],"metadata":{"id":"waAp4Z9Ef4zK","executionInfo":{"status":"ok","timestamp":1697226342914,"user_tz":-60,"elapsed":4,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["X_train_reshaped = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)\n","X_test_reshaped = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)\n"],"metadata":{"id":"KMs5cwlPgRav","executionInfo":{"status":"ok","timestamp":1697226342914,"user_tz":-60,"elapsed":3,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["autoencoder = Sequential()\n","autoencoder.add(Dense(64, activation='relu', input_shape=(X_train.shape[1],)))\n","autoencoder.add(Dense(len(y.unique()), activation='sigmoid'))\n","autoencoder.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","autoencoder.fit(X_train, y_train_onehot, epochs=10, batch_size=128)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"esvE6jd29xG6","executionInfo":{"status":"ok","timestamp":1697226354711,"user_tz":-60,"elapsed":11800,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}},"outputId":"d4723704-d602-4f69-9f69-35d1dab20671"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","689/689 [==============================] - 2s 2ms/step - loss: 0.1158 - accuracy: 0.9618\n","Epoch 2/10\n","689/689 [==============================] - 1s 1ms/step - loss: 0.0366 - accuracy: 0.9890\n","Epoch 3/10\n","689/689 [==============================] - 1s 1ms/step - loss: 0.0250 - accuracy: 0.9923\n","Epoch 4/10\n","689/689 [==============================] - 1s 1ms/step - loss: 0.0206 - accuracy: 0.9937\n","Epoch 5/10\n","689/689 [==============================] - 1s 1ms/step - loss: 0.0183 - accuracy: 0.9944\n","Epoch 6/10\n","689/689 [==============================] - 1s 1ms/step - loss: 0.0168 - accuracy: 0.9946\n","Epoch 7/10\n","689/689 [==============================] - 1s 1ms/step - loss: 0.0157 - accuracy: 0.9949\n","Epoch 8/10\n","689/689 [==============================] - 1s 1ms/step - loss: 0.0148 - accuracy: 0.9953\n","Epoch 9/10\n","689/689 [==============================] - 1s 1ms/step - loss: 0.0142 - accuracy: 0.9955\n","Epoch 10/10\n","689/689 [==============================] - 1s 1ms/step - loss: 0.0137 - accuracy: 0.9955\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x7f8ece683b50>"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["lstm_model = Sequential()\n","lstm_model.add(LSTM(64, input_shape=(X_train_reshaped.shape[1], X_train_reshaped.shape[2])))\n","lstm_model.add(Dense(len(y.unique()), activation='sigmoid'))\n","lstm_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","lstm_model.fit(X_train_reshaped, y_train_onehot, epochs=10, batch_size=128)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pj1dGIz9gfmZ","executionInfo":{"status":"ok","timestamp":1697226497699,"user_tz":-60,"elapsed":142999,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}},"outputId":"e531e296-5b00-4faa-cbaf-5189cef51771"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","689/689 [==============================] - 13s 17ms/step - loss: 0.1647 - accuracy: 0.9377\n","Epoch 2/10\n","689/689 [==============================] - 11s 17ms/step - loss: 0.0616 - accuracy: 0.9788\n","Epoch 3/10\n","689/689 [==============================] - 12s 17ms/step - loss: 0.0366 - accuracy: 0.9875\n","Epoch 4/10\n","689/689 [==============================] - 12s 18ms/step - loss: 0.0298 - accuracy: 0.9898\n","Epoch 5/10\n","689/689 [==============================] - 12s 17ms/step - loss: 0.0255 - accuracy: 0.9910\n","Epoch 6/10\n","689/689 [==============================] - 12s 17ms/step - loss: 0.0234 - accuracy: 0.9918\n","Epoch 7/10\n","689/689 [==============================] - 11s 17ms/step - loss: 0.0212 - accuracy: 0.9922\n","Epoch 8/10\n","689/689 [==============================] - 11s 16ms/step - loss: 0.0203 - accuracy: 0.9928\n","Epoch 9/10\n","689/689 [==============================] - 11s 15ms/step - loss: 0.0189 - accuracy: 0.9931\n","Epoch 10/10\n","689/689 [==============================] - 11s 17ms/step - loss: 0.0176 - accuracy: 0.9937\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x7f8ecb21dea0>"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["gru_model = Sequential()\n","gru_model.add(GRU(64, input_shape=(X_train_reshaped.shape[1], X_train_reshaped.shape[2])))\n","gru_model.add(Dense(len(y.unique()), activation='sigmoid'))\n","gru_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","gru_model.fit(X_train_reshaped, y_train_onehot, epochs=10, batch_size=128)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ihAkXSiEg3tL","executionInfo":{"status":"ok","timestamp":1697226605969,"user_tz":-60,"elapsed":108275,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}},"outputId":"7647422c-ade1-4735-fc35-b79eaf4bd92d"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","689/689 [==============================] - 12s 16ms/step - loss: 0.1498 - accuracy: 0.9359\n","Epoch 2/10\n","689/689 [==============================] - 10s 14ms/step - loss: 0.0517 - accuracy: 0.9827\n","Epoch 3/10\n","689/689 [==============================] - 11s 16ms/step - loss: 0.0376 - accuracy: 0.9882\n","Epoch 4/10\n","689/689 [==============================] - 11s 16ms/step - loss: 0.0287 - accuracy: 0.9912\n","Epoch 5/10\n","689/689 [==============================] - 11s 16ms/step - loss: 0.0238 - accuracy: 0.9925\n","Epoch 6/10\n","689/689 [==============================] - 11s 16ms/step - loss: 0.0193 - accuracy: 0.9935\n","Epoch 7/10\n","689/689 [==============================] - 11s 16ms/step - loss: 0.0163 - accuracy: 0.9943\n","Epoch 8/10\n","689/689 [==============================] - 9s 14ms/step - loss: 0.0138 - accuracy: 0.9949\n","Epoch 9/10\n","689/689 [==============================] - 11s 16ms/step - loss: 0.0133 - accuracy: 0.9952\n","Epoch 10/10\n","689/689 [==============================] - 11s 16ms/step - loss: 0.0117 - accuracy: 0.9955\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x7f8ecae439a0>"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["rnn_model = Sequential()\n","rnn_model.add(SimpleRNN(64, input_shape=(X_train_reshaped.shape[1], X_train_reshaped.shape[2])))\n","rnn_model.add(Dense(len(y.unique()), activation='softmax'))\n","rnn_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n","rnn_model.fit(X_train_reshaped, y_train_onehot, epochs=10, batch_size=128)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aVgv0PGIhUfe","executionInfo":{"status":"ok","timestamp":1697226633946,"user_tz":-60,"elapsed":27982,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}},"outputId":"f4be2871-42f7-4fe0-e984-2fbb84035527"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","689/689 [==============================] - 3s 4ms/step - loss: 0.0500 - accuracy: 0.9821\n","Epoch 2/10\n","689/689 [==============================] - 3s 5ms/step - loss: 0.0200 - accuracy: 0.9935\n","Epoch 3/10\n","689/689 [==============================] - 3s 4ms/step - loss: 0.0159 - accuracy: 0.9946\n","Epoch 4/10\n","689/689 [==============================] - 3s 4ms/step - loss: 0.0140 - accuracy: 0.9950\n","Epoch 5/10\n","689/689 [==============================] - 3s 4ms/step - loss: 0.0128 - accuracy: 0.9957\n","Epoch 6/10\n","689/689 [==============================] - 3s 4ms/step - loss: 0.0123 - accuracy: 0.9957\n","Epoch 7/10\n","689/689 [==============================] - 3s 5ms/step - loss: 0.0112 - accuracy: 0.9957\n","Epoch 8/10\n","689/689 [==============================] - 2s 4ms/step - loss: 0.0108 - accuracy: 0.9960\n","Epoch 9/10\n","689/689 [==============================] - 3s 4ms/step - loss: 0.0106 - accuracy: 0.9961\n","Epoch 10/10\n","689/689 [==============================] - 2s 4ms/step - loss: 0.0101 - accuracy: 0.9963\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x7f8ebbe9ee00>"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["models = [autoencoder, lstm_model, gru_model, rnn_model]\n","names = ['Autoencoder', 'LSTM', 'GRU', 'RNN']\n","\n","for model, name in zip(models, names):\n","    if name == 'Autoencoder':\n","        y_pred = model.predict(X_test)\n","    else:\n","        y_pred = model.predict(X_test_reshaped)\n","    y_pred_class =  np.argmax(y_pred, axis=1)\n","    accuracy = accuracy_score(y_test, y_pred_class)\n","    print(f\"Accuracy for {name}: {accuracy}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bLrkmT6Ci0LK","executionInfo":{"status":"ok","timestamp":1697226648774,"user_tz":-60,"elapsed":14842,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}},"outputId":"fa756f7d-9032-4553-fdf2-ea7ed5a5e561"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["1181/1181 [==============================] - 1s 764us/step\n","Accuracy for Autoencoder: 0.9953164690939882\n","1181/1181 [==============================] - 3s 3ms/step\n","Accuracy for LSTM: 0.9926439458086368\n","1181/1181 [==============================] - 3s 2ms/step\n","Accuracy for GRU: 0.9954487722269263\n","1181/1181 [==============================] - 2s 1ms/step\n","Accuracy for RNN: 0.9957927603725656\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import precision_score, recall_score, f1_score"],"metadata":{"id":"RXNi-DAmkkE3","executionInfo":{"status":"ok","timestamp":1697226648774,"user_tz":-60,"elapsed":10,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["performance_metrics = {}"],"metadata":{"id":"ZjH95q0_klTJ","executionInfo":{"status":"ok","timestamp":1697226648774,"user_tz":-60,"elapsed":8,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["models = [autoencoder, lstm_model, gru_model, rnn_model]\n","names = ['Autoencoder', 'LSTM', 'GRU', 'RNN']\n","\n","for model, name in zip(models, names):\n","    if name == 'Autoencoder':\n","        y_pred = model.predict(X_test)\n","    else:\n","        y_pred = model.predict(X_test_reshaped)\n","\n","    y_pred_class = np.argmax(y_pred, axis=1)\n","\n","    # Calculate metrics\n","    accuracy = accuracy_score(y_test, y_pred_class)\n","    precision = precision_score(y_test, y_pred_class, average='weighted')\n","    recall = recall_score(y_test, y_pred_class, average='weighted')\n","    f1 = f1_score(y_test, y_pred_class, average='weighted')\n","\n","    # Store metrics in the dictionary\n","    performance_metrics[name] = {'Accuracy': accuracy, 'Precision': precision, 'Recall': recall, 'F1 Score': f1}\n","\n","# Convert the metrics dictionary to a DataFrame for better visualization\n","performance_df = pd.DataFrame(performance_metrics).transpose()\n","\n","print(performance_df)"],"metadata":{"id":"cgxYHcueksWv","executionInfo":{"status":"ok","timestamp":1697226659898,"user_tz":-60,"elapsed":11131,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}},"outputId":"d30c397c-54ac-46b9-ce0e-b725978ea17e","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["1181/1181 [==============================] - 1s 970us/step\n","1181/1181 [==============================] - 3s 2ms/step\n","1181/1181 [==============================] - 2s 2ms/step\n","1181/1181 [==============================] - 2s 1ms/step\n","             Accuracy  Precision    Recall  F1 Score\n","Autoencoder  0.995316   0.995324  0.995316  0.995317\n","LSTM         0.992644   0.992651  0.992644  0.992645\n","GRU          0.995449   0.995457  0.995449  0.995449\n","RNN          0.995793   0.995802  0.995793  0.995793\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns"],"metadata":{"id":"_fwpdpw9pIn3","executionInfo":{"status":"ok","timestamp":1697226660251,"user_tz":-60,"elapsed":367,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["models = [autoencoder, lstm_model, gru_model, rnn_model]\n","names = ['Autoencoder', 'LSTM', 'GRU', 'RNN']\n"],"metadata":{"id":"8Mc78gPrpYLw","executionInfo":{"status":"ok","timestamp":1697226660251,"user_tz":-60,"elapsed":4,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":32,"outputs":[]},{"cell_type":"code","source":["!pip install seaborn"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lB3dD2LqrFr4","executionInfo":{"status":"ok","timestamp":1697226665078,"user_tz":-60,"elapsed":4831,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}},"outputId":"bc1b6f6f-2910-41a1-f64e-e0483085855e"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: seaborn in /usr/local/lib/python3.10/dist-packages (0.12.2)\n","Requirement already satisfied: numpy!=1.24.0,>=1.17 in /usr/local/lib/python3.10/dist-packages (from seaborn) (1.23.5)\n","Requirement already satisfied: pandas>=0.25 in /usr/local/lib/python3.10/dist-packages (from seaborn) (1.5.3)\n","Requirement already satisfied: matplotlib!=3.6.1,>=3.1 in /usr/local/lib/python3.10/dist-packages (from seaborn) (3.7.1)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.1->seaborn) (1.1.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.1->seaborn) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.1->seaborn) (4.43.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.1->seaborn) (1.4.5)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.1->seaborn) (23.2)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.1->seaborn) (9.4.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.1->seaborn) (3.1.1)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.1->seaborn) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.25->seaborn) (2023.3.post1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib!=3.6.1,>=3.1->seaborn) (1.16.0)\n"]}]},{"cell_type":"code","source":["testdata =  pd.read_csv('/content/drive/MyDrive/KDDTest+.txt')"],"metadata":{"id":"wc5dMgtBZ1JZ","executionInfo":{"status":"ok","timestamp":1697226665497,"user_tz":-60,"elapsed":425,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["testdata.columns = columns"],"metadata":{"id":"p2Mjv2UbZ3Ti","executionInfo":{"status":"ok","timestamp":1697226665498,"user_tz":-60,"elapsed":10,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["testdata.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":255},"id":"h-d4z0DvZ8Xz","executionInfo":{"status":"ok","timestamp":1697226665498,"user_tz":-60,"elapsed":9,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}},"outputId":"ecb9b804-4e89-4386-93be-33ee816cf408"},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   duration protocol_type   service  flag  src_bytes  dst_bytes  land  \\\n","0         0           tcp   private   REJ          0          0     0   \n","1         2           tcp  ftp_data    SF      12983          0     0   \n","2         0          icmp     eco_i    SF         20          0     0   \n","3         1           tcp    telnet  RSTO          0         15     0   \n","4         0           tcp      http    SF        267      14515     0   \n","\n","   wrong_fragment  urgent  hot  ...  dst_host_same_srv_rate  \\\n","0               0       0    0  ...                    0.00   \n","1               0       0    0  ...                    0.61   \n","2               0       0    0  ...                    1.00   \n","3               0       0    0  ...                    0.31   \n","4               0       0    0  ...                    1.00   \n","\n","   dst_host_diff_srv_rate  dst_host_same_src_port_rate  \\\n","0                    0.06                         0.00   \n","1                    0.04                         0.61   \n","2                    0.00                         1.00   \n","3                    0.17                         0.03   \n","4                    0.00                         0.01   \n","\n","   dst_host_srv_diff_host_rate  dst_host_serror_rate  \\\n","0                         0.00                  0.00   \n","1                         0.02                  0.00   \n","2                         0.28                  0.00   \n","3                         0.02                  0.00   \n","4                         0.03                  0.01   \n","\n","   dst_host_srv_serror_rate  dst_host_rerror_rate  dst_host_srv_rerror_rate  \\\n","0                       0.0                  1.00                      1.00   \n","1                       0.0                  0.00                      0.00   \n","2                       0.0                  0.00                      0.00   \n","3                       0.0                  0.83                      0.71   \n","4                       0.0                  0.00                      0.00   \n","\n","    attack  level  \n","0  neptune     21  \n","1   normal     21  \n","2    saint     15  \n","3    mscan     11  \n","4   normal     21  \n","\n","[5 rows x 43 columns]"],"text/html":["\n","  <div id=\"df-ea09af43-ecd2-494a-b8e2-fcc51bd799f9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>duration</th>\n","      <th>protocol_type</th>\n","      <th>service</th>\n","      <th>flag</th>\n","      <th>src_bytes</th>\n","      <th>dst_bytes</th>\n","      <th>land</th>\n","      <th>wrong_fragment</th>\n","      <th>urgent</th>\n","      <th>hot</th>\n","      <th>...</th>\n","      <th>dst_host_same_srv_rate</th>\n","      <th>dst_host_diff_srv_rate</th>\n","      <th>dst_host_same_src_port_rate</th>\n","      <th>dst_host_srv_diff_host_rate</th>\n","      <th>dst_host_serror_rate</th>\n","      <th>dst_host_srv_serror_rate</th>\n","      <th>dst_host_rerror_rate</th>\n","      <th>dst_host_srv_rerror_rate</th>\n","      <th>attack</th>\n","      <th>level</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>tcp</td>\n","      <td>private</td>\n","      <td>REJ</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0.00</td>\n","      <td>0.06</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>1.00</td>\n","      <td>1.00</td>\n","      <td>neptune</td>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>tcp</td>\n","      <td>ftp_data</td>\n","      <td>SF</td>\n","      <td>12983</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0.61</td>\n","      <td>0.04</td>\n","      <td>0.61</td>\n","      <td>0.02</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>normal</td>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>icmp</td>\n","      <td>eco_i</td>\n","      <td>SF</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>1.00</td>\n","      <td>0.00</td>\n","      <td>1.00</td>\n","      <td>0.28</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>saint</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>tcp</td>\n","      <td>telnet</td>\n","      <td>RSTO</td>\n","      <td>0</td>\n","      <td>15</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0.31</td>\n","      <td>0.17</td>\n","      <td>0.03</td>\n","      <td>0.02</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.83</td>\n","      <td>0.71</td>\n","      <td>mscan</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>tcp</td>\n","      <td>http</td>\n","      <td>SF</td>\n","      <td>267</td>\n","      <td>14515</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>1.00</td>\n","      <td>0.00</td>\n","      <td>0.01</td>\n","      <td>0.03</td>\n","      <td>0.01</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>normal</td>\n","      <td>21</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 43 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ea09af43-ecd2-494a-b8e2-fcc51bd799f9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ea09af43-ecd2-494a-b8e2-fcc51bd799f9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ea09af43-ecd2-494a-b8e2-fcc51bd799f9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3e089f6c-c996-4fb4-bfae-b86450cf5186\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3e089f6c-c996-4fb4-bfae-b86450cf5186')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3e089f6c-c996-4fb4-bfae-b86450cf5186 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["testdata_attack = testdata.attack.map(lambda a: 0 if a == 'normal' else 1)"],"metadata":{"id":"OFUofdWQaEI1","executionInfo":{"status":"ok","timestamp":1697226665498,"user_tz":-60,"elapsed":6,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["testdata['attack'] = testdata_attack"],"metadata":{"id":"VStM6Kv6aUfB","executionInfo":{"status":"ok","timestamp":1697226665715,"user_tz":-60,"elapsed":223,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":["categorical_cols = ['protocol_type', 'service', 'flag', 'land', 'logged_in', 'is_host_login', 'is_guest_login']\n","for col in categorical_cols:\n","    le = LabelEncoder()\n","    testdata[col] = le.fit_transform(testdata[col])"],"metadata":{"id":"ArF6KJNYaaQ7","executionInfo":{"status":"ok","timestamp":1697226665715,"user_tz":-60,"elapsed":8,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":39,"outputs":[]},{"cell_type":"code","source":["X_test = testdata.drop(columns=['attack'])\n","y_test = testdata['attack']"],"metadata":{"id":"xid4s2smajNO","executionInfo":{"status":"ok","timestamp":1697226665715,"user_tz":-60,"elapsed":8,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":40,"outputs":[]},{"cell_type":"code","source":["X_test_selected = X_test.iloc[:, sorted_idx]"],"metadata":{"id":"joap0VLIapVI","executionInfo":{"status":"ok","timestamp":1697226665716,"user_tz":-60,"elapsed":9,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":41,"outputs":[]},{"cell_type":"code","source":["X_test_normalized = scaler.transform(X_test_selected)"],"metadata":{"id":"K9rtYfpAauGe","executionInfo":{"status":"ok","timestamp":1697226665716,"user_tz":-60,"elapsed":9,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":42,"outputs":[]},{"cell_type":"code","source":["y_test_onehot = to_categorical(y_test)"],"metadata":{"id":"fgjom-vwazFJ","executionInfo":{"status":"ok","timestamp":1697226665716,"user_tz":-60,"elapsed":8,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":43,"outputs":[]},{"cell_type":"code","source":["X_test_reshaped = X_test_normalized.reshape(X_test_normalized.shape[0], X_test_normalized.shape[1], 1)"],"metadata":{"id":"q346dMqVa3tP","executionInfo":{"status":"ok","timestamp":1697226665716,"user_tz":-60,"elapsed":8,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}}},"execution_count":44,"outputs":[]},{"cell_type":"code","source":["for model, name in zip(models, names):\n","    if name == 'Autoencoder':\n","        y_pred = model.predict(X_test_normalized)\n","    else:\n","        y_pred = model.predict(X_test_reshaped)\n","\n","    y_pred_class = np.argmax(y_pred, axis=1)\n","    accuracy = accuracy_score(y_test, y_pred_class)\n","    print(f\"Accuracy for {name} on Test Data: {accuracy}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0JmM0n_0a9sG","executionInfo":{"status":"ok","timestamp":1697226675699,"user_tz":-60,"elapsed":9991,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}},"outputId":"dc0b1d02-7c5c-47a5-83b9-186366a48d4f"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["705/705 [==============================] - 1s 1ms/step\n","Accuracy for Autoencoder on Test Data: 0.8649691700306081\n","705/705 [==============================] - 2s 3ms/step\n","Accuracy for LSTM on Test Data: 0.8683848644812137\n","705/705 [==============================] - 2s 3ms/step\n","Accuracy for GRU on Test Data: 0.8237590382823936\n","705/705 [==============================] - 2s 3ms/step\n","Accuracy for RNN on Test Data: 0.8612429579026749\n"]}]},{"cell_type":"code","source":["import seaborn as sns\n","from sklearn.metrics import confusion_matrix\n","import matplotlib.pyplot as plt\n","\n","def plot_confusion_matrix(true_labels, predicted_labels, model_name):\n","    cm = confusion_matrix(true_labels, predicted_labels)\n","    plt.figure(figsize=(8,6))\n","    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Normal', 'Attack'], yticklabels=['Normal', 'Attack'])\n","    plt.xlabel('Predicted labels')\n","    plt.ylabel('True labels')\n","    plt.title(f'Confusion Matrix for {model_name}')\n","    plt.show()\n","\n","models = [autoencoder, lstm_model, gru_model, rnn_model]\n","names = ['Autoencoder', 'LSTM', 'GRU', 'RNN']\n","\n","for model, name in zip(models, names):\n","    if name == 'Autoencoder':\n","        y_pred = model.predict(X_test_normalized)\n","    else:\n","        y_pred = model.predict(X_test_reshaped)\n","\n","    y_pred_class = np.argmax(y_pred, axis=1)\n","    plot_confusion_matrix(y_test, y_pred_class, name)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"hK8oQH26mCZC","executionInfo":{"status":"ok","timestamp":1697226712500,"user_tz":-60,"elapsed":12851,"user":{"displayName":"Debabrat Goswami","userId":"08523162101968183461"}},"outputId":"ee82fdf5-0c31-4eac-b445-c948288f10fb"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["705/705 [==============================] - 2s 2ms/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["705/705 [==============================] - 3s 4ms/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["705/705 [==============================] - 1s 2ms/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["705/705 [==============================] - 1s 2ms/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAApoAAAIjCAYAAACjybtCAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABd7klEQVR4nO3deXhNV9vH8d9JyCCRwZRIS2ImqLEPoaYKKVpjq4iKuQM1j22pqdKqqbQPHVRCUbSooUVqLFIlFVRRsypBEakpJNnvH17ncRrahGwnnO+n17kuZ+211773IXW719rrWAzDMAQAAABkMSd7BwAAAIBHE4kmAAAATEGiCQAAAFOQaAIAAMAUJJoAAAAwBYkmAAAATEGiCQAAAFOQaAIAAMAUJJoAAAAwBYkmkA0dOHBADRs2lLe3tywWi5YsWZKl4x89elQWi0VRUVFZOu7DrG7duqpbt26WjXfp0iV17dpV/v7+slgs6tOnT5aNDQAPCxJN4C4OHTqkl19+WUWLFpWbm5u8vLxUs2ZNffDBB7p69aqp146IiNDu3bv1zjvvaPbs2apataqp13uQOnbsKIvFIi8vrzt+jgcOHJDFYpHFYtH48eMzPf7Jkyc1YsQIxcfHZ0G0927s2LGKiorSq6++qtmzZ+ull14y9XpBQUHWz81iscjDw0P/+c9/NGvWrHR9169fb+0XFxeX7njHjh3l6elp01a3bl1ZLBY999xz6frf+ofLvfx+AXi05bB3AEB2tGLFCr3wwgtydXVVhw4dVK5cOV2/fl2bNm3SwIEDtWfPHn3yySemXPvq1auKjY3Vm2++qZ49e5pyjcDAQF29elU5c+Y0Zfx/kyNHDl25ckXLli1T69atbY7NmTNHbm5uunbt2j2NffLkSY0cOVJBQUGqWLFihs9bvXr1PV3vbtauXavq1avr7bffztJx/0nFihXVv39/SdKpU6f02WefKSIiQsnJyerWrdsdzxkxYoSWLVuW4WssX75ccXFxqlKlSpbEDODRRkUT+JsjR46oTZs2CgwM1K+//qoPPvhA3bp1U48ePTRv3jz9+uuvKlu2rGnXP3v2rCTJx8fHtGtYLBa5ubnJ2dnZtGv8E1dXV9WvX1/z5s1Ld2zu3Llq0qTJA4vlypUrkiQXFxe5uLhk2bhnzpzJ0t/DlJQUXb9+/R/7PPbYY2rfvr3at2+vgQMHatOmTfL09NSkSZPu2L9ixYpavny5fv755wzFULhwYfn6+mrkyJGZjh+AYyLRBP5m3LhxunTpkmbMmKGCBQumO168eHH17t3b+j4lJUWjR49WsWLF5OrqqqCgIL3xxhtKTk62OS8oKEjPPvusNm3apP/85z9yc3NT0aJFbaY2R4wYocDAQEnSwIEDZbFYFBQUJOnmdOatX99uxIgRslgsNm0xMTF66qmn5OPjI09PT5UqVUpvvPGG9fjd1miuXbtWtWrVkoeHh3x8fNSsWTPt3bv3jtc7ePCgOnbsKB8fH3l7e6tTp07WpC0j2rVrp++++06JiYnWtm3btunAgQNq165duv7nz5/XgAEDVL58eXl6esrLy0uNGjXSzp07rX3Wr1+vJ598UpLUqVMn6/TwrfusW7euypUrp7i4ONWuXVu5cuWyfi5/X6MZEREhNze3dPcfFhYmX19fnTx58o73dWta+siRI1qxYoU1hqNHj0q6mYB26dJFfn5+cnNzU4UKFRQdHW0zxu1T0ZMnT7b+2fr1118z9Nnekj9/fpUuXVqHDh264/HXX39dvr6+GjFiRIbGy507t/r27atly5ZlODkF4NhINIG/WbZsmYoWLaoaNWpkqH/Xrl01fPhwVa5cWZMmTVKdOnUUGRmpNm3apOt78OBBPf/882rQoIEmTJggX19fdezYUXv27JEktWzZ0lp9atu2rWbPnq3JkydnKv49e/bo2WefVXJyskaNGqUJEyaoadOm2rx58z+e9/333yssLExnzpzRiBEj1K9fP23ZskU1a9a0Jkm3a926tf766y9FRkaqdevWioqKylSlq2XLlrJYLFq0aJG1be7cuSpdurQqV66crv/hw4e1ZMkSPfvss5o4caIGDhyo3bt3q06dOtakr0yZMho1apQkqXv37po9e7Zmz56t2rVrW8c5d+6cGjVqpIoVK2ry5MmqV6/eHeP74IMPlD9/fkVERCg1NVWS9PHHH2v16tWaOnWqAgIC7nhemTJlNHv2bOXLl08VK1a0xpA/f35dvXpVdevW1ezZsxUeHq73339f3t7e6tixoz744IN0Y82cOVNTp05V9+7dNWHCBOXJkyeDn+5NKSkpOnHihHx9fe943MvLK9OJY+/evTOVnAJwcAYAq4sXLxqSjGbNmmWof3x8vCHJ6Nq1q037gAEDDEnG2rVr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KSkDAAAgMzL91DkAAMCjhnqaOTKcaKalpZkZBwAAgN04kWmaItNfQQkAAABkRKYeBgIAAHgU8TCQOahoAgAAwBRUNAEAgMNjiaY5qGgCAADAFFQ0AQCAw3MSJU0zUNEEAACAKahoAgAAh8caTXOQaAIAAIfH9kbmYOocAAAApqCiCQAAHB5fQWkOKpoAAAAwBYkmAABweBaLea/78e6778pisahPnz7WtmvXrqlHjx7KmzevPD091apVK50+fdrmvOPHj6tJkybKlSuXChQooIEDByolJcWmz/r161W5cmW5urqqePHiioqKur9g74BEEwAAIBvatm2bPv74Yz3xxBM27X379tWyZcu0cOFCbdiwQSdPnlTLli2tx1NTU9WkSRNdv35dW7ZsUXR0tKKiojR8+HBrnyNHjqhJkyaqV6+e4uPj1adPH3Xt2lWrVq3K0nsg0QQAAA7PyWIx7XUvLl26pPDwcH366afy9fW1tl+8eFEzZszQxIkT9fTTT6tKlSqaOXOmtmzZoh9//FGStHr1av3666/64osvVLFiRTVq1EijR4/WRx99pOvXr0uSpk+friJFimjChAkqU6aMevbsqeeff16TJk26/w/zNiSaAAAAJkpOTlZSUpLNKzk5+R/P6dGjh5o0aaLQ0FCb9ri4ON24ccOmvXTp0ipcuLBiY2MlSbGxsSpfvrz8/PysfcLCwpSUlKQ9e/ZY+/x97LCwMOsYWYVEEwAAODwz12hGRkbK29vb5hUZGXnXWL788kv9/PPPd+yTkJAgFxcX+fj42LT7+fkpISHB2uf2JPPW8VvH/qlPUlKSrl69munP727Y3ggAADg8MytvQ4cOVb9+/WzaXF1d79j3999/V+/evRUTEyM3NzcTo3owqGgCAACYyNXVVV5eXjavuyWacXFxOnPmjCpXrqwcOXIoR44c2rBhg6ZMmaIcOXLIz89P169fV2Jios15p0+flr+/vyTJ398/3VPot97/Wx8vLy+5u7tnxW1LItEEAACQxWIx7ZUZ9evX1+7duxUfH299Va1aVeHh4dZf58yZU2vWrLGes3//fh0/flwhISGSpJCQEO3evVtnzpyx9omJiZGXl5eCg4OtfW4f41afW2NkFabOAQAAsoncuXOrXLlyNm0eHh7Kmzevtb1Lly7q16+f8uTJIy8vL73++usKCQlR9erVJUkNGzZUcHCwXnrpJY0bN04JCQl666231KNHD2sl9ZVXXtGHH36oQYMGqXPnzlq7dq0WLFigFStWZOn9kGgCAACH9zB9AeWkSZPk5OSkVq1aKTk5WWFhYfrvf/9rPe7s7Kzly5fr1VdfVUhIiDw8PBQREaFRo0ZZ+xQpUkQrVqxQ37599cEHH+jxxx/XZ599prCwsCyN1WIYhpGlI2YDmw9csHcIAEwS2nqYvUMAYJKrOz6027Vnbf/dtLE7VC1k2tjZHRVNAADg8O51Y3X8Mx4GAgAAgCmoaAIAAIdHPdMcJJoAAMDhMXNuDqbOAQAAYAoqmgAAwOFldmN1ZAwVTQAAAJiCiiYAAHB4VN7MwecKAAAAU1DRBAAADo81muagogkAAABTUNEEAAAOj3qmOahoAgAAwBRUNAEAgMNjjaY5SDQBAIDDY4rXHHyuAAAAMAUVTQAA4PCYOjcHFU0AAACYgoomAABweNQzzUFFEwAAAKagogkAABweSzTNQUUTAAAApqCiCQAAHJ4TqzRNQaIJAAAcHlPn5mDqHAAAAKagogkAAByehalzU1DRBAAAgCmoaAIAAIfHGk1zUNEEAACAKahoAgAAh8f2RuagogkAAABTUNEEAAAOjzWa5rB7RTMpKemuxw4ePPgAIwEAAI7KYjHv5cjsnmg2adJEycnJ6dr379+vunXrPviAAAAAkCXsnmh6enqqRYsWSklJsbbt3btXdevWVatWrewYGQAAcBQWE/9zZHZPNBctWqSLFy8qPDxchmHol19+Ud26ddW2bVt98MEH9g4PAAAA98juiaa7u7tWrFih/fv3q3Xr1qpfv746dOigiRMn2js0AADgIJws5r0cmV2eOv/7A0BOTk6aP3++GjRooFatWmnYsGHWPl5eXvYIEQAAAPfJLommj4+PLHd4DMswDE2fPl0ff/yxDMOQxWJRamqqHSIEAACOxNHXUprFLonmunXr7HFZAAAAPEB2STTr1Kljj8sCAADckaPvd2kWuz8MNHPmTC1cuDBd+8KFCxUdHW2HiAAAgKNheyNz2D3RjIyMVL58+dK1FyhQQGPHjrVDRAAAAMgKdv+u8+PHj6tIkSLp2gMDA3X8+HE7RAQAAByNo29DZBa7VzQLFCigXbt2pWvfuXOn8ubNa4eIAAAAkBXsXtFs27atevXqpdy5c6t27dqSpA0bNqh3795q06aNnaMDAACOwNHXUprF7onm6NGjdfToUdWvX185ctwMJy0tTR06dGCNJgAAwEPM7ommi4uL5s+fr9GjR2vnzp1yd3dX+fLlFRgYaO/Q8ICsWBCtuNj1OnXimFxcXFW8THk937GHCj5+88/An6dPalCXlnc899Uh7+jJp+pLkn6N36bFX3yiE8cOydXVTTXrN1bLDq/I2fl/f8x/iftRS+Z+qj+OH1HOnC4qVa6iXuzSS/n8Asy/UcAB1KxcTH07hKpycGEVzO+t1n0/0bL1tsujhr3aRJ1a1JBPbnfF7jysXmPn69Dxs9bjvl65NHHwC2pcu5zSDENL1sRrwLivdPnqdUlSicACmvpmG5Uu6i9vT3edOntR87/brnc++VYpKWnpYnohrIpmvdtJy9btVOt+n5r7AeChxfZG5rB7onlLyZIlVbJkSXuHATvY/8sOPd2klYqUCFZqaqoWzZqmicN6a8y0eXJ1c1eefH6aNHuFzTkbVi7Rd4vmqHyVEEnS8cMHNHlEPz37Ykd17TdciefOatZH7yktLU0vduklSTqbcFJTxgxSWPO26j5gpK5evqR5n32gD8cO0YgPZj3w+wYeRR7urtr92x+a9U2s5k/snu54/46heq1tHXUbPltH/zin4a89q2Uf9VClVmOUfD1FkjRzbIT883nr2Vc/VM4czvp4ZHt9NKydOr4RJUm6kZKqOct/Uvy+33XxrysqX/JxfTSsrZycLHr7w2U21ytcMI8i+zbXpp8Pmn7vANLLFonmiRMntHTpUh0/flzXr1+3OTZx4kQ7RYUHpd+oyTbvO/cdpj7hjXT04D6VKldJTs7O8va1fTDs59gNevKp+nJzzyVJ2vbD93q8SHE1bdtFkuQXUEgvdOqpae+9paZtu8g9l4eOHdwnIy1VLV56WU5ON5+De6ZFO00dM0gpKSnWpRsA7t3qzb9q9eZf73q8R7t6eu/TVVq+frckqeuwWTr2faSa1qughaviVKqIn8JqllXN8HH6+debO4/0e2+hlkx9VUMnLdapsxd19I9zOvrHOeuYx09dUO2qJVSzUjGbazk5WRQ1NkKjp3+rmpWKySe3uwl3jEcFBU1z2P2p8zVr1qhUqVKaNm2aJkyYoHXr1mnmzJn6/PPPFR8fb+/wYAdXL1+SJHl4et3x+NGD+3T88G+q3fA5a9uNG9eVM6eLTb+crq66cT1Zxw7ukyQFFi8ti8VJm75frrTUVF25fElb1q1UcMUnSTKBByDosbwqmN9ba7fus7YlXbqmbb8cVbUngiRJ1Z4oogtJV6xJpiSt3bpfaWmGnix35yVVRQvlU4MaZfRDnG3V8o3ujXT2/CVFL4nN+pvBI8fJYjHt5cjsnmgOHTpUAwYM0O7du+Xm5qavv/5av//+u+rUqaMXXnjhX89PTk5WUlKSzev69eQHEDnMkJaWpnmfTlbx4Cf0eFCxO/b5YfVSFSwUpOJlnrC2latcXQf37daPG1YrLTVVF/48o2XzPpckJV64WfnI7x+g/qM/0KJZ09S9RW31fDFUF/48o1cHv2P+jQGQf76b/3g8c/4vm/Yz5/6SX96bx/zyeuns346npqbpfNIV+eWz/cfnuqh+uvDjJO1ZOkKbfz6kUdP+t8SmRsWi6tg8RK+NnmvCnQDIKLsnmnv37lWHDh0kSTly5NDVq1fl6empUaNG6b333vvX8yMjI+Xt7W3zmj19ktlhwyRfTHtffxw7pFcGjbnj8evJ1/TjhtWq1eA5m/Zylaupdaeemv3Re+reoraGvtxa5avWkCTrvyYvXjinqKmRqvF0Yw2b9LkGvztNOXLk0EeRQ2UYhrk3BiDLvTT4c4W0e08RQ2eqUa2y6tvh5oOBnrlcNWNMB702ep7OJV62c5R4WFhMfDkyu88Xenh4WNdlFixYUIcOHVLZsmUlSX/++ee/nj906FD169fPpi3u9ytZHyhM98W08dq5bbOGvDtdefIVuGOf7ZvX6XryNdWo3zjdsbAW7dSweVslnv9THp659eeZU/o6+r/K7/+YJGnN8q/k7uGp1p1ft57TbcBIDejYVIf371Gx0uXMuTEAkqSEP5MkSQXy5Lb+WpIK5M2tXftPSJJOn0tS/jy5bc5zdnZSHq9cOn3bOZJ04nSiJGnf4QQ5OTnpo7faavLsNSr6eD4FPZZPX09+2drX6f+/9uWvbR/oiRajdeTEv//9AuD+2T3RrF69ujZt2qQyZcqocePG6t+/v3bv3q1FixapevXq/3q+q6urXF1dbdpcXFLNChcmMAxDc6ZP0M+xGzQ48iPl97/7VkM/rF6qiv+pJS9v3zset1gs8s2bX5K0dUOM8uT3U2CxUpJuVkMtf1src+uhIMNIvyUKgKx19I9zOnX2oupVK6Vdv/0hScrt4aYnywXp04WbJElbdx2Rr1cuVSpTSDv2/i5JqvtkSTk5WbTtl2N3HdvJyaKcOZzl5GTR/qOnVeV52yUxI3o8K89cbhrw/lc6kXDBpDvEQ83RS48msXuiOXHiRF26dPPhj5EjR+rSpUuaP3++SpQowRPnDuKLae/rxw2r1eutcXLL5aGL/7+m0j2Xh1xc3az9Tp/8Xb/tiVefEXf+c/Hd11+ofJXqslicFLdlvb79apZeHfyOnJydJUkVnqypmG++1NJ5M1StdgNdu3pFX8+arrwF/FW4KFtrAVnBw91FxQrlt74Peiyvnij5mC4kXdHvCRf00dx1Gtz1GR08flZH/zint19rolNnL2rpup2SpP1HTmvV5j36aFg79XrnS+XM4axJQ1pr4aqfdersRUlSm0ZVdSMlVb8cPKnk6ymqElxYo19vqq9WxyklJU0pStOvh07ZxJX411VJStcOwFx2TzSLFi1q/bWHh4emT59ux2hgD+u+XSRJem/oazbtnfu8padCn7W+3xSzXL75CqhspWp3HGd3XKyWL4hSyo0bKlSkuF5/a5ye+P91mpJUpkJVdR8wSt8tmq3vvv5CLq5uKla6nPqNnGyT0AK4d5WDA7X6s97W9+MGtJIkzV76o7q//YUmRH2vXO6u+vCttvLJ7a4t8YfUtMd/rXtoSlKnN6I1aUhrffvx60pLu7lhe/9xC63HU1LT1K9jA5UILCCLxaLjp85r2vyNmvrF2gd3o3jk8BWU5rAYdn4KomjRotq2bZvy5rXdJzExMVGVK1fW4cOHMz3m5gNMiwCPqtDWw+wdAgCTXN3xod2uvfXQRdPGrlbM27Sxszu7VzSPHj2q1NT0ayqTk5P1xx9/2CEiAADgaBx8u0vT2C3RXLp0qfXXq1atkrf3/7L91NRUrVmzRkFBQXaIDAAAOBryTHPYLdFs3ry59dcRERE2x3LmzKmgoCBNmDDhAUcFAACArGK3RDMt7eZ2MkWKFNG2bduUL18+e4UCAAAcHSVNU9j9m4FGjhyp3Llzp2u/fv26Zs2aZYeIAAAAkBXsnmh26tRJFy+mf9Lrr7/+UqdOnewQEQAAcDQWE/9zZHZPNA3DSPdtLZJ04sQJmweEAAAA8HCx2xrNSpUqyWKxyGKxqH79+sqR43+hpKam6siRI3rmmWfsFR4AAHAgbG9kDrs/dR4fH6+wsDB5enpaj7m4uCgoKEjlypWzU3QAAAC4X3ZLNN9++21JUlBQkF588UW5ud38CsC//vpL8+bN06RJkxQXF3fHzdwBAACyEgVNc9h9jWZERITc3Ny0ceNGRUREqGDBgho/fryefvpp/fjjj/YODwAAOAKLiS8HZtevoExISFBUVJRmzJihpKQktW7dWsnJyVqyZImCg4PtGRoAAADuk90qms8995xKlSqlXbt2afLkyTp58qSmTp1qr3AAAIADY3sjc9itovndd9+pV69eevXVV1WiRAl7hQEAAACT2K2iuWnTJv3111+qUqWKqlWrpg8//FB//vmnvcIBAAAOzGIx7+XI7JZoVq9eXZ9++qlOnTqll19+WV9++aUCAgKUlpammJgY/fXXX/YKDQAAAFnA7k+de3h4qHPnztq0aZN2796t/v37691331WBAgXUtGlTe4cHAAAcAA+dm8PuiebtSpUqpXHjxunEiROaN2+evcMBAADAfbDr9kZ34+zsrObNm1u/PQgAAMBUjl56NEm2TDQBAAAeJEffhsgs2WrqHAAAAI8OKpoAAMDhOfo2RGahogkAAABTUNEEAAAOj4KmOahoAgAAwBRUNAEAAChpmoKKJgAAQDYRGRmpJ598Urlz51aBAgXUvHlz7d+/36bPtWvX1KNHD+XNm1eenp5q1aqVTp8+bdPn+PHjatKkiXLlyqUCBQpo4MCBSklJsemzfv16Va5cWa6uripevLiioqKy/H5INAEAgMOzmPhfZmzYsEE9evTQjz/+qJiYGN24cUMNGzbU5cuXrX369u2rZcuWaeHChdqwYYNOnjypli1bWo+npqaqSZMmun79urZs2aLo6GhFRUVp+PDh1j5HjhxRkyZNVK9ePcXHx6tPnz7q2rWrVq1adf8f5m0shmEYWTpiNrD5wAV7hwDAJKGth9k7BAAmubrjQ7tde88fl/+90z0q+5jHPZ979uxZFShQQBs2bFDt2rV18eJF5c+fX3PnztXzzz8vSdq3b5/KlCmj2NhYVa9eXd99952effZZnTx5Un5+fpKk6dOna/DgwTp79qxcXFw0ePBgrVixQr/88ov1Wm3atFFiYqJWrlx5fzd8GyqaAADA4Vks5r2Sk5OVlJRk80pOTs5QXBcvXpQk5cmTR5IUFxenGzduKDQ01NqndOnSKly4sGJjYyVJsbGxKl++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oTFjxuiZZ57Rrl275OLiogkTJigqKkqff/65ypQpowkTJmjx4sV6+umn73rdDh06KDY2VlOmTFGFChV05MgR/fnnnypUqJC+/vprtWrVSvv375eXl5fc3d0lSZGRkfriiy80ffp0lShRQhs3blT79u2VP39+1alTR7///rtatmypHj16qHv37tq+fbv69++f6c8kd+7cioqKUkBAgHbv3q1u3bopd+7cGjRokLXPwYMHtWDBAi1btkxJSUnq0qWLXnvtNc2ZM0eSNGfOHA0fPlwffvihKlWqpB07dqhbt27y8PBQREREumsOGzZMv/76q7777jvly5dPBw8e1NWrVzMdOwBkewaAR1JERITRrFkzwzAMIy0tzYiJiTFcXV2NAQMGWI/7+fkZycnJ1nNmz55tlCpVykhLS7O2JScnG+7u7saqVasMwzCMggULGuPGjbMev3HjhvH4449br2UYhlGnTh2jd+/ehmEYxv79+w1JRkxMzB3jXLdunSHJuHDhgrXt2rVrRq5cuYwtW7bY9O3SpYvRtm1bwzAMY+jQoUZwcLDN8cGDB6cb6+8kGYsXL77r8ffff9+oUqWK9f3bb79tODs7GydOnLC2fffdd4aTk5Nx6tQpwzAMo1ixYsbcuXNtxhk9erQREhJiGIZhHDlyxJBk7NixwzAMw3juueeMTp063TUGAHhUUNEEHmHLly+Xp6enbty4obS0NLVr104jRoywHi9fvrzNusydO3fq4MGDyp07t804165d06FDh3Tx4kWdOnVK1apVsx7LkSOHqlatmm76/Jb4+Hg5OzurTp06GY774MGDunLliho0aGDTfv36dVWqVEmStHfvXps4JCkkJCTD17hl/vz5mjJlig4dOqRLly4pJSVFXl5eNn0KFy6sxx57zOY6aWlp2r9/v3Lnzq1Dhw6pS5cu6tatm7VPSkqKvL2973jNV199Va1atdLPP/+shg0bqnnz5qpRo0amYweA7I5EE3iE1atXT9OmTZOLi4sCAgKUI4ftj7yHh4fN+0uXLqlKlSrWKeHb5c+f/55iuDUVnhmXLl2SJK1YscImwZNurjvNKrGxsQoPD9fIkSMVFhYmb29vffnll5owYUKmY/3000/TJb7Ozs53PKdRo0Y6duyYvv32W8XExKh+/frq0aOHxo8ff+83AwDZEIkm8Ajz8PBQ8eLFM9y/cuXKmj9/vgoUKJCuqndLwYIFtXXrVtWuXVvSzcpdXFycKleufMf+5cuXV1pamjZs2KDQ0NB0x29VVFNTU61twcHBcnV11fHjx+9aCS1Tpoz1waZbfvzxx3+/ydts2bJFgYGBevPNN61tx44dS9fv+PHjOnnypAICAqzXcXJyUqlSpeTn56eAgAAdPnxY4eHhGb52/vz5FRERoYiICNWqVUsDBw4k0QTwyOGpcwBW4eHhypcvn5o1a6YffvhBR44c0fr169WrVy+dOHFCktS7d2+9++67WrJkifbt26fXXnvtH/fADAoKUkREhDp37qwlS5ZYx1ywYIEkKTAwUBaLRcuXL9fZs2d16dIl5c6dWwMGDFDfvn0VHR2tQ4cO6eeff9bUqVMVHR0tSXrllVd04MABDRw4UPv379fcuXMVFRWVqfstUaKEjh8/ri+//FKHDh3SlClTtHjx4nT93NzcFBERoZ07d+qHH35Qr1691Lp1a/n7+0uSRo4cqcjISE2ZMkW//fabdu/erZkzZ2rixIl3vO7w4cP1zTff6ODBg9qzZ4+WL1+uMmXKZCp2AHgYkGgCsMqVK5c2btyowoULq2XLlipTpoy6dOmia9euWSuc/fv310svvaSIiAiFhIQod+7catGixT+OO23aND3//PN67bXXVLp0aXXr1k2XL1+WJD322GMaOXKkhgwZIj8/P/Xs2VOSNHr0aA0bNkyRkZEqU6aMnnnmGa1YsUJFihSRdHPd5Ndff60lS5aoQoUKmj59usaOHZup+23atKn69u2rnj17qmLFitqyZYuGDRuWrl/x4sXVsmVLNW7cWA0bNtQTTzxhs31R165d9dlnn2nmzJkqX7686tSpo6ioKGusf+fi4qKhQ4fqiSeeUO3ateXs7Kwvv/wyU7EDwMPAYtxtBT8AAABwH6hoAgAAwBQkmgAAADAFiSYAAABMQaIJAAAAU5BoAgAAwBQkmgAAADAFiSYAAABMQaIJAAAAU5BoAgAAwBQkmgAAADAFiSYAAABM8X/C7eTiwEFx+AAAAABJRU5ErkJggg==\n"},"metadata":{}}]}]}